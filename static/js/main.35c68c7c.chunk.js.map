{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionTable/styles.ts","components/TransactionTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeSvg","alt","Intl","NumberFormat","style","currency","format","outcomeSvg","className","totalSvg","TransactionTable","map","title","category","DateTimeFormat","id","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setType","setTitle","setAmount","setCategory","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","scheme","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35c68c7c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:3000/api\"\r\n});\r\n\r\nexport { api };","import { createContext, useState, useEffect, ReactNode, useContext } from 'react';\r\nimport { api } from '../services/api';\r\n\r\ninterface Transaction {\r\n  id: number;\r\n  title: string;\r\n  category: string;\r\n  amount: number;\r\n  createdAt: string\r\n  type: string;\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\r\n\r\ninterface TransactionsContextData {\r\n  transactions: Transaction[];\r\n  createTransaction:(transactions: TransactionInput) => Promise<void>;\r\n}\r\n\r\ninterface TransactionsProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst TransactionsContext = createContext<TransactionsContextData>({} as TransactionsContextData);\r\n\r\nexport function TransactionsProvider({children}: TransactionsProviderProps) {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n  useEffect(() => {\r\n    api.get('/transactions')\r\n    .then(response => setTransactions(response.data.transactions));\r\n  }, []);\r\n\r\n  async function createTransaction(transactionInput: TransactionInput) {\r\n    const response = await api.post(\"/transactions\", {\r\n      ...transactionInput,\r\n      createdAt: new Date()\r\n    });\r\n    const { transaction } = response.data;\r\n\r\n    setTransactions([\r\n      ...transactions,\r\n      transaction\r\n    ]);\r\n  }\r\n\r\n  return (\r\n    <TransactionsContext.Provider value={{transactions, createTransaction }} >\r\n      {children}\r\n    </TransactionsContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useTransactions() {\r\n  const context = useContext(TransactionsContext);\r\n\r\n  return context;\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n\r\n  gap: 2rem;\r\n  margin-top: -10rem;\r\n\r\n  div {\r\n    background-color: var(--shape);\r\n    padding: 1.5rem 2rem;\r\n    border-radius: 0.25rem;\r\n    color: var(--text-title);\r\n\r\n  header { \r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n   }\r\n\r\n   strong {\r\n     display: block;\r\n     margin-top: 1rem;\r\n     font-size: 2rem;\r\n     font-weight: 500;\r\n     line-height: 3rem;\r\n   }\r\n\r\n   &.highlight-background{\r\n     background: var(--green);\r\n     color: #FFF;\r\n   }\r\n\r\n  }\r\n`;\r\n","import incomeSvg from '../../assets/income.svg';\r\nimport outcomeSvg from '../../assets/outcome.svg';\r\nimport totalSvg from '../../assets/total.svg';\r\nimport { useTransactions } from '../../hooks/useTransactions';\r\n\r\nimport { Container } from './styles';\r\n\r\nexport function Summary() {\r\n\r\n  const { transactions } = useTransactions();\r\n\r\n  const summary = transactions.reduce((acc, transaction) => {\r\n    if (transaction.type == \"deposit\") {\r\n      acc.deposits += transaction.amount;\r\n      acc.total += transaction.amount;\r\n    } else {\r\n      acc.withdraws += transaction.amount;\r\n      acc.total -= transaction.amount;\r\n    }\r\n\r\n    return acc\r\n  }, {\r\n    deposits: 0,\r\n    withdraws: 0,\r\n    total: 0,\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <header>\r\n          <p>Entradas</p>\r\n          <img src={incomeSvg} alt=\"Entradas\" />\r\n        </header>\r\n        <strong>{new Intl.NumberFormat(\"pt-BR\", {\r\n          style: \"currency\",\r\n          currency: \"BRL\"\r\n        }).format(summary.deposits)}</strong>\r\n      </div>\r\n      <div >\r\n        <header>\r\n          <p>Saidas</p>\r\n          <img src={outcomeSvg} alt=\"Saidas\" />\r\n        </header>\r\n        <strong>-{new Intl.NumberFormat(\"pt-BR\", {\r\n          style: \"currency\",\r\n          currency: \"BRL\"\r\n        }).format(summary.withdraws)}</strong>\r\n      </div>\r\n      <div className=\"highlight-background\" >\r\n        <header>\r\n          <p>Total</p>\r\n          <img src={totalSvg} alt=\"Total\" />\r\n        </header>\r\n        <strong>{new Intl.NumberFormat(\"pt-BR\", {\r\n          style: \"currency\",\r\n          currency: \"BRL\"\r\n        }).format(summary.total)}</strong>\r\n      </div>\r\n    </Container>\r\n  );\r\n};","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  margin-top: 4rem;\r\n\r\n  table {\r\n    width: 100%;\r\n    border-spacing: 0 0.5rem;\r\n\r\n    th {\r\n      color: var(--text-body);\r\n      font-weight: 400;\r\n      padding: 1rem 2rem;\r\n      text-align: left;\r\n      line-height: 1.5rem;\r\n    }\r\n\r\n    td {\r\n      padding: 1rem 2rem;\r\n      border: 0;\r\n      background-color: var(--shape);\r\n      font-weight: 400;\r\n      color: var(--text-body);\r\n      border-radius: 0.25rem;\r\n\r\n      &:first-child {\r\n        color: var(--text-title);\r\n     }\r\n     \r\n     &.deposit {\r\n       color: var(--green);\r\n     }\r\n\r\n     &.withdraw {\r\n       color: var(--red);\r\n     }\r\n     \r\n    }\r\n  }\r\n`;\r\n","import { useTransactions } from '../../hooks/useTransactions';\r\nimport { Container } from './styles';\r\n\r\nexport function TransactionTable(){\r\n\r\n  const { transactions } = useTransactions();\r\n\r\n  return (\r\n    <Container>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Titulo</th>\r\n            <th>Valor</th>\r\n            <th>Categoria</th>\r\n            <th>Data</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {\r\n            transactions.map(transaction => (\r\n              <tr\r\n                key={transaction.id}\r\n              >\r\n                <td>{transaction.title}</td>\r\n                <td className={transaction.type}>{new Intl.NumberFormat(\"pt-BR\",{\r\n                  style: \"currency\",\r\n                  currency: \"BRL\"\r\n                }).format(transaction.amount)}</td>\r\n                <td>{transaction.category}</td>\r\n                <td>{new Intl.DateTimeFormat(\"pt-BR\").format(new Date(transaction.createdAt))}</td>\r\n              </tr>\r\n            ))\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </Container>\r\n  );\r\n};","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n\r\n  padding: 2.5rem 1rem;\r\n`;","import { Summary } from '../Summary';\r\nimport { TransactionTable } from '../TransactionTable';\r\n\r\nimport { Container } from './styles';\r\n\r\nexport function Dashboard(){\r\n  return (\r\n    <Container>\r\n      <Summary />\r\n      <TransactionTable />\r\n    </Container>\r\n  );\r\n};","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\r\n\r\nexport const Container = styled.header`\r\n  background: var(--blue);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n\r\n  padding: 2rem 1rem 10rem;\r\n  display: flex;\r\n\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n\r\n  button {\r\n    font-size: 1rem;\r\n    color: #FFFFFF;\r\n    background-color: var(--blue-light);\r\n    border: 0;\r\n    padding: 0 2rem;\r\n    border-radius: 0.25rem;\r\n    height: 3rem;\r\n\r\n    transition: filter 0.2s;\r\n\r\n    &:hover {\r\n      filter: brightness(0.9);\r\n    }\r\n\r\n  }\r\n`;\r\n","import logoImg from '../../assets/logo.svg';\r\n\r\nimport { Container, Content } from './styles'\r\n\r\ninterface HeaderProps {\r\n  onOpenNewTransactionModal: () => void;\r\n}\r\n\r\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\r\n\r\n  return (\r\n    <Container>\r\n      <Content>\r\n      <img src={logoImg} alt=\"dt money\" />\r\n      <button type=\"button\" onClick={onOpenNewTransactionModal} >\r\n        Nova transação\r\n      </button>\r\n       \r\n      </Content>\r\n    </Container>\r\n  );\r\n};","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from 'styled-components';\r\nimport { darken, transparentize } from 'polished';\r\n\r\n\r\n\r\nexport const Container = styled.form`\r\n  h2 {\r\n    color: var(--text-title);\r\n    font-size: 1.5rem;\r\n    margin-bottom: 2rem;\r\n  }\r\n  input {\r\n      width: 100%;\r\n      padding: 0 1.5rem;\r\n      height: 4rem;\r\n      border-radius: 0.25rem;\r\n\r\n      border: 1px solid #d7d7d7;\r\n      background: #e7e9ee;\r\n       \r\n      font-weight: 400;\r\n      font-size: 1rem;\r\n\r\n      &::placeholder {\r\n        color: var(--text-body)\r\n      }\r\n\r\n      & + input {\r\n        margin-top: 1rem;\r\n      }\r\n    }\r\n    button[type=\"submit\"] {\r\n      width: 100%;\r\n      height: 4rem;\r\n      padding: 0 1.5rem;\r\n      background: var(--green);\r\n      color: #FFFFFF;\r\n      border-radius: 0.25rem;\r\n      border: 0;\r\n      font-size: 1rem;\r\n      margin-top: 1.5rem;\r\n      font-weight: 600;\r\n\r\n      transition: filter 0.2s;\r\n\r\n    &:hover {\r\n      filter: brightness(0.9);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n  margin: 1rem 0;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 0.5rem;\r\n\r\n`;\r\n\r\ninterface RadiosBoxProps {\r\n  isActive: boolean;\r\n  activeColor: 'green' | 'red';\r\n}\r\n\r\nconst colors = {\r\n  green: '#33CC95',\r\n  red: '#E52E4D'\r\n}\r\n\r\nexport const RadioBox = styled.button<RadiosBoxProps>`\r\n    height: 4rem;\r\n    border: 1px solid #d7d7d7;\r\n    border-radius: 0.25rem;\r\n    background: ${(props) => props.isActive ?\r\n     transparentize(0.9, colors[props.activeColor]) : 'transparent'};\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    \r\n    transition: border-color 0.2s;\r\n\r\n    &:hover {\r\n      border-color: ${darken(0.1, \"#d7d7d7\")};\r\n    \r\n    }\r\n    img {\r\n      width: 20px;\r\n      height: 20px;\r\n    }\r\n    span {\r\n      display: inline-block;\r\n      margin-left: 1rem;\r\n      font-size: 1rem;\r\n\r\n      color: var(--text-title);\r\n    }\r\n`;","import { FormEvent, useState, useContext } from 'react';\r\n\r\nimport Modal from 'react-modal';\r\nimport closeImg from '../../assets/close.svg';\r\nimport incomeSvg from '../../assets/income.svg';\r\nimport outcomeSvg from '../../assets/outcome.svg';\r\nimport { useTransactions } from '../../hooks/useTransactions';\r\n\r\nimport { api } from '../../services/api';\r\n\r\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\r\n\r\ninterface newTransactionModalProps {\r\n  isOpen: boolean;\r\n  onRequestClose: () => void;\r\n}\r\n\r\nexport function NewTransactionModal({  isOpen, onRequestClose}: newTransactionModalProps){\r\n\r\n  const { createTransaction } = useTransactions();\r\n\r\n  const [type, setType] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState(0);\r\n  const [category, setCategory] = useState('');\r\n\r\n  async function handleCreateNewTransaction(event: FormEvent) {\r\n    event.preventDefault();\r\n    \r\n      await createTransaction({\r\n        amount,\r\n        category,\r\n        title,\r\n        type\r\n      });\r\n\r\n      setAmount(0);\r\n      setCategory('');\r\n      setTitle('');\r\n      setType('deposit');\r\n      onRequestClose();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n        isOpen={isOpen}\r\n        onRequestClose={onRequestClose}\r\n        overlayClassName=\"react-modal-overlay\"\r\n        className=\"react-modal-content\"\r\n      >\r\n        <button \r\n          type=\"button\" \r\n          onClick={onRequestClose} \r\n          className=\"react-modal-close\" \r\n        >\r\n          <img src={closeImg} alt=\"fechar modal\" />\r\n        </button>\r\n        <Container onSubmit={handleCreateNewTransaction} >\r\n          <h2>Cadastrar Transação </h2>\r\n          <input \r\n            placeholder=\"Título\" \r\n            value={title}\r\n            onChange={event => setTitle(event.target.value)}    \r\n          />\r\n          <input \r\n            type=\"number\" \r\n            placeholder=\"Valor\" \r\n            value={amount}\r\n            onChange={event => setAmount(Number(event.target.value))}          \r\n          />\r\n          \r\n          <TransactionTypeContainer>\r\n            <RadioBox\r\n              type=\"button\"\r\n              onClick={() => setType(\"deposit\")}\r\n              isActive={type == \"deposit\"}\r\n              activeColor=\"green\"\r\n            >\r\n              <img src={incomeSvg} alt=\"Entrada\" />\r\n              <span>Entrada</span>\r\n            </RadioBox>\r\n\r\n            <RadioBox\r\n              type=\"button\"\r\n              onClick={() => setType(\"withdraw\")}\r\n              isActive={type == \"withdraw\"}\r\n              activeColor=\"red\"\r\n            >\r\n              <img src={outcomeSvg} alt=\"Saida\" />\r\n              <span>Saida</span>\r\n            </RadioBox>\r\n          </TransactionTypeContainer>\r\n\r\n          <input \r\n            placeholder=\"Categoria\" \r\n            value={category}\r\n            onChange={event => setCategory(event.target.value)}    \r\n          />\r\n          <button type=\"submit\" >Cadastrar</button>\r\n        </Container>\r\n      </Modal>\r\n  );\r\n};","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n  :root {\r\n      --blue: #5429cc;\r\n      --blue-light: #6933FF;\r\n      --green: #33CC95;\r\n      --red: #E52E4D;\r\n\r\n      --shape: #FFFFFF;\r\n      --background: #F0F2F5;\r\n\r\n      --text-title: #363F5F;\r\n      --text-body: #969CB2;\r\n  }\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html {\r\n    @media (max-width: 1080px) {\r\n      font-size: 93.75%;\r\n    }\r\n\r\n    @media (max-width: 720px) {\r\n      font-size: 87.5%;\r\n    }\r\n\r\n  }\r\n\r\n  body {\r\n    background: var(--background);\r\n    -webkit-font-smoothing: antialiased;\r\n  }\r\n\r\n  body, input, textarea, button {\r\n    font-family: \"Poppins\", sans-serif;\r\n    font-weight: 400;\r\n  }\r\n\r\n  h1, h2, h3, h4, h5, h6, strong {\r\n    font-weight: 600;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n\r\n  [disabled] {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n  .react-modal-overlay {\r\n    background: rgba(0, 0, 0, 0.5);\r\n\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n  .react-modal-content {\r\n    width: 100%;\r\n    max-width: 576px;\r\n    background: var(--background);\r\n    padding: 3rem;\r\n    position: relative;\r\n    border-radius: 0.24rem;\r\n  }\r\n  .react-modal-close {\r\n    position: absolute;\r\n    top: 1.5rem;\r\n    right: 1.5rem;\r\n\r\n    border: 0;\r\n    background: transparent;\r\n\r\n    transition: filter 0.2s;\r\n\r\n    &:hover {\r\n      filter: brightness(0.8);\r\n    }\r\n  }\r\n`;","import { useState } from 'react';\nimport Modal from 'react-modal';\n\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from './components/NewTransactionModal';\n\nimport { GlobalStyle } from \"./styles/global\"\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nModal.setAppElement(\"#root\")\n\nexport function App() {\n\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n  \n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header\n        onOpenNewTransactionModal={handleOpenNewTransactionModal}\n      />\n      <Dashboard />\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App } from './App';\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: \"Freelance website\",\n          type: \"deposit\",\n          category: \"Dev\",\n          amount: 6000,\n          createdAt: new Date()\n        },\n      ],\n    })\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all(\"transaction\");\n    });\n\n    this.post(\"/transactions\", (scheme, request) => {\n      const data = JSON.parse(request.requestBody);\n      \n      return scheme.create(\"transaction\", data);\n    });\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}